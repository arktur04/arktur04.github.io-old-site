<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: самообразование, | Записная книжка разработчика]]></title>
  <link href="http://arktur04.github.io/blog/categories/samoobrazovaniie/atom.xml" rel="self"/>
  <link href="http://arktur04.github.io/"/>
  <updated>2016-01-10T21:23:17+05:00</updated>
  <id>http://arktur04.github.io/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Книга Steven W. Smith "the Scientist and Engineer’s Guide to Digital Signal Processing"]]></title>
    <link href="http://arktur04.github.io/blog/2016/01/10/knigha-steven-w-smith-the-scientist-and-engineers-guide-to-digital-signal-processing/"/>
    <updated>2016-01-10T20:51:57+05:00</updated>
    <id>http://arktur04.github.io/blog/2016/01/10/knigha-steven-w-smith-the-scientist-and-engineers-guide-to-digital-signal-processing</id>
    <content type="html"><![CDATA[<p>Steven W. Smith “The Scientist and Engineer’s Guide to Digital Signal Processing”, 626 стр, англ. язык. Книга легально и бесплатно доступна для скачивания с сайта Analog Devices.
Я читал эту книгу когда-то давно, но отдельными главами, а сейчас решил освежить в памяти ключевые моменты DSP.</p>

<p><a href="/images/2016/01/47958_600.gif"><img title="The Scientist and Engineer’s Guide to Digital Signal Processing" src="/images/2016/01/47958_600_small.png" alt="" height="300" /></a></p>

<p>Книга достаточно простая, и обходится абсолютным минимумом математических формул. Автор делает основной упор на то, чтобы читатель наглядно представлял себе, как связаны между собой различные преобразования, используемые в DSP: фильтрация, ДПФ, свёртка и т. п.
В книге приведены основные алгоритмы DSP: фильтры, КИХ и БИХ, ДПФ прямое и обратное и некоторые другие. Таким образом, вы можете воспользоваться готовыми программами, переписать их на С или на ассемблере и не вдаваться глубоко в математику.
Если интересна именно математика, лежащая в основе DSP, нужно читать Оппенгейма-Шафера.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Книга Chen Chung-Shu "Creating an LLVM Backend for the Cpu0 Architecture"]]></title>
    <link href="http://arktur04.github.io/blog/2016/01/04/knigha-chen-chung-shu-creating-an-llvm-backend-for-the-cpu0-architecture/"/>
    <updated>2016-01-04T20:17:43+05:00</updated>
    <id>http://arktur04.github.io/blog/2016/01/04/knigha-chen-chung-shu-creating-an-llvm-backend-for-the-cpu0-architecture</id>
    <content type="html"><![CDATA[<p>Прочитал книгу Chen Chung-Shu “Creating an LLVM Backend for the Cpu0 Architecture”, 575 стр., англ. язык.
Книга по LLVM, единственная в своём роде книга, детально описывающая процесс разработки бэкенда.</p>

<p><a href="/images/2016/01/line-tile.png"><img title="Creating an LLVM Backend for the Cpu0 Architecture" src="/images/2016/01/line-tile_small.png" alt="" height="300" /></a></p>

<p>Я читал эту книгу ранее, но автор непрерывно вносит исправления и дополнения в текст (эта книга существует только в онлайновом виде), поэтому я решил перечитать всё полностью, с начала до конца, самый свежий вариант. Сейчас я могу сказать, что читал по LLVM всё, что опубликовано, и что имеет хотя бы немного существенное значение (можно также найти огромное количество статей в духе “мы разработали компилятор для нашего процессора, это круто”. Их я обычно не читаю). Источников по LLVM очень мало, печатных книг всего две, например.</p>

<p>Проблема ещё и в том, что все процессоры разные, и нельзя просто скопировать исходник одного бэкенда, подправить там пару строк и получить другой. Они настолько различны, что вряд ли вы вообще найдёте в двух разных бэкендах похожие куски кода. Поэтому чтение этой книги не заменит вам собственного опыта.
Желающим разработать свой компилятор, я могу посоветовать следующее:
не бояться разбираться в существующем коде, как бэкендов, так и Core Library.
не бояться экспериментировать и писать с нуля собственные алгоритмы оптимизаций.
не пытаться изобрести велосипед. Если нужные функции есть в Core Library, их необходимо изучить и использовать. Если, напротив, каких-то функций нет ни в Core Library, ни в других бэкендах, значит, скорее всего, вы хотите странного, и, скорее всего, на самом деле это вам не нужно. Хотя могут быть исключения из этого правила.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Книга Andrew Moore "FPGA for Dummies"]]></title>
    <link href="http://arktur04.github.io/blog/2015/12/16/knigha-fpga-for-dummies/"/>
    <updated>2015-12-16T21:41:38+05:00</updated>
    <id>http://arktur04.github.io/blog/2015/12/16/knigha-fpga-for-dummies</id>
    <content type="html"><![CDATA[<p>Прочитал книгу Andrew Moore “FPGA for dummies”, 44 стр., англ. язык. Книжка совсем простая, конечно, и объясняет совсем базовые вещи, типа, что такое FPGA и зачем они нужны.</p>

<p><a href="/images/2015/12/FPGAs_dummies_full.jpg"><img title="FPGA for dummies" src="/images/2015/12/FPGAs_dummies_small.png" alt="" height="300" /></a></p>
]]></content>
  </entry>
  
</feed>
