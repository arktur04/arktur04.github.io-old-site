<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Arm | My Octopress Blog]]></title>
  <link href="http://arktur04.github.io/blog/categories/arm/atom.xml" rel="self"/>
  <link href="http://arktur04.github.io/"/>
  <updated>2015-12-17T19:38:44+05:00</updated>
  <id>http://arktur04.github.io/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Драйвер для Linux: первый шаг]]></title>
    <link href="http://arktur04.github.io/blog/2015/10/02/%25d0%25b4%25d1%2580%25d0%25b0%25d0%25b9%25d0%25b2%25d0%25b5%25d1%2580-%25d0%25b4%25d0%25bb%25d1%258f-linux-%25d0%25bf%25d0%25b5%25d1%2580%25d0%25b2%25d1%258b%25d0%25b9-%25d1%2588%25d0%25b0%25d0%25b3/"/>
    <updated>2015-10-02T22:11:34+05:00</updated>
    <id>http://arktur04.github.io/blog/2015/10/02/%d0%b4%d1%80%d0%b0%d0%b9%d0%b2%d0%b5%d1%80-%d0%b4%d0%bb%d1%8f-linux-%d0%bf%d0%b5%d1%80%d0%b2%d1%8b%d0%b9-%d1%88%d0%b0%d0%b3</id>
    <content type="html"><![CDATA[<p>Продолжаю эксперименты с Altera Cyclone V. На этот раз объектом эксперимента стал драйвер для той прошивки FPGA, про которую я писал ранее. Сама прошивка простейшая: она просто мигает светодиодами с частотой, которую можно задавать программно. В прошлом посте на эту тему я сделал управление частотой мигания из обычной (user-space) программы, которая получает доступ к физической памяти через функции open("/dev/mem") и mmap().<br />
Однако такой путь считается "hacky and unsafe". Поэтому следующим логичным шагом должно стать написание драйвера.</p>


<p><a href="http://32bit.me/wordpress/wp-content/uploads/2015/10/Tux-linux-and-ARM-multiplatform-support.jpg"><img class="alignnone size-full wp-image-2147" alt="Tux-linux-and-ARM-multiplatform-support" src="/assets/Tux-linux-and-ARM-multiplatform-support.jpg" width="672" height="370" /></a></p>


<p>Я воспользовался готовым исходником драйвера (<a href="https://github.com/zhemao/sockit_test/tree/master/software/blinker">ссылка</a>) за авторством Howard Mao (он на самом деле не Howard, а Zhe Hao Mao). Конечно, для того, чтобы разобраться в работе кода, почитал отдельные главы книги Linux Device Drivers (есть русский перевод).</p>


<p>Для компиляции пришлось вытаскивать архив Arrow SocKit 13.1 GSRD Linux отсюда: <a href="http://releases.rocketboards.org/release/2013.11/gsrd/src">http://releases.rocketboards.org/release/2013.11/gsrd/src</a>, файл linux-socfpga-gsrd-13.1-src.bsx. Объем архива около 1.1 Гб, но сервер очень медленный, качается несколько часов. Честно говоря, я впервые увидел файл с расширением bsx, оказалось, что это самораспаковывающийся архив. Просто запускаем его и он разворачивается в указанную папку. В ней в папке sources находится файл linux-socfpga.tgz. Его тоже нужно распаковать, естественно. Это и есть как таковое ядро системы, которое нужно указывать при компиляции драйвера.</p>


<p>Однако всё не так просто. После компиляции записываем скомпилированный драйвер blinker.ko на SD-карту, после загрузки Linux пишем<strong> insmod blinker.ko</strong> и получаем следующее: "<em>blinker: version magic '3.9.0-00161-ged01b8c SMP mod_unload ARMv7 p2v8 ' should be '3.9.0 SMP mod_unload ARMv7 p2v8'</em>". Не совпали волшебные номерки. Причем версия одна и та же, просто зачем-то к ней приделан какой-то добавочный номер.</p>


<p>Решений может быть три: 1. Скомпилировать Linux именно из этого скачанного исходника (очень неохота) или 2. Подправить номер в исходниках ядра Linux. 3. Использовать команду modprobe с ключом -f, который заставляет систему игнорировать "волшебные цифры".  Однако этот способ почему-то не заработал.<br />
Итак, способ номер 2, подправить номер в исходнике ядра. Данный номер записан в файле /include/generated/utsrelease.h. Исправляем то, что там было, на "3.9.0", и перекомпилируем драйвер. На всякий случай смотрим hex-редактором файл blinker.ko, чтобы убедиться, что волшебные циферки такие, как нужно. Снова записываем драйвер на SD-карту, запускаем insmod, всё прошло гладко. Теперь можно проверить работу драйвера, посылая ему числа от 1 до 15 для управления частотой миганий: echo 1 &gt; blinker - мигает быстро, echo 15 &gt; blinker - мигает медленно. Пока всё. Немного, но путь в тысячу ли начинается с одного шага.</p>


<p>Эксперименты продолжаются.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Управление FPGA из программы]]></title>
    <link href="http://arktur04.github.io/blog/2015/09/23/%25d1%2583%25d0%25bf%25d1%2580%25d0%25b0%25d0%25b2%25d0%25bb%25d0%25b5%25d0%25bd%25d0%25b8%25d0%25b5-fpga-%25d0%25b8%25d0%25b7-%25d0%25bf%25d1%2580%25d0%25be%25d0%25b3%25d1%2580%25d0%25b0%25d0%25bc%25d0%25bc%25d1%258b/"/>
    <updated>2015-09-23T20:51:35+05:00</updated>
    <id>http://arktur04.github.io/blog/2015/09/23/%d1%83%d0%bf%d1%80%d0%b0%d0%b2%d0%bb%d0%b5%d0%bd%d0%b8%d0%b5-fpga-%d0%b8%d0%b7-%d0%bf%d1%80%d0%be%d0%b3%d1%80%d0%b0%d0%bc%d0%bc%d1%8b</id>
    <content type="html"><![CDATA[<p>Приведённый ниже код писал не я, он взят отсюда:<a href="https://zhehaomao.com/blog/fpga/2013/12/27/sockit-3.html"> https://zhehaomao.com/blog/fpga/2013/12/27/sockit-3.html</a>, но я решил оставить его здесь, т.к. он пригодится для дальнейших экспериментов.</p>


<p>Напоминаю, что данная программа работает в ОС Linux GSRD на SoC Altera Cyclone V (ядро ARM Cortex A9). Компилятор Linaro GCC, берём здесь: <a href="http://releases.linaro.org/latest/components/toolchain/binaries/4.8/arm-linux-gnueabihf/">http://releases.linaro.org/latest/components/toolchain/binaries/4.8/arm-linux-gnueabihf/</a></p>


<pre lang="c" line="1">#include <sys/mman.h>;
#include <sys/mman.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <stdint.h>

#define PAGE_SIZE 4096
#define LWHPS2FPGA_BRIDGE_BASE 0xff200000
#define BLINK_OFFSET 0x0

volatile unsigned char *blink_mem;
void *bridge_map;

int main(int argc, char *argv[])
{
    int fd, ret = EXIT_FAILURE;
    unsigned char value;
    off_t blink_base = LWHPS2FPGA_BRIDGE_BASE;

    if (argc < 2) {
        fprintf(stderr, "Usage: %s number\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    /* check the bounds of the value being set */
    value = atoi(argv[1]);
    if (value < 1 || value > 15) {
        fprintf(stderr, "Invalid delay setting."
                "Delay must be between 1 and 15, inclusive.\n");
        exit(EXIT_FAILURE);
    }

    /* open the memory device file */
    fd = open("/dev/mem", O_RDWR|O_SYNC);
    if (fd < 0) {
        perror("open");
        exit(EXIT_FAILURE);
    }

    /* map the LWHPS2FPGA bridge into process memory */
    bridge_map = mmap(NULL, PAGE_SIZE, PROT_WRITE, MAP_SHARED,
                fd, blink_base);
    if (bridge_map == MAP_FAILED) {
        perror("mmap");
        goto cleanup;
    }

    /* get the delay_ctrl peripheral's base address */
    blink_mem = (unsigned char *) (bridge_map + BLINK_OFFSET);

    /* write the value */
    *blink_mem = value;

    if (munmap(bridge_map, PAGE_SIZE) < 0) {
        perror("munmap");
        goto cleanup;
    }

    ret = 0;

cleanup:
    close(fd);
    return ret;
}</stdint.h></unistd.h></stdlib.h></stdio.h></fcntl.h></pre>


<p>Программа управляет частотой мигания светодиода, сам делитель частоты расположен в FPGA, частота задаётся регистром.</p>


<p><!--more--></p>


<p>Если убрать все строки, отвечающие за обработку ошибок, то остаётся это:</p>


<pre lang="c" line="1">bridge_map = mmap(NULL, PAGE_SIZE, PROT_WRITE, MAP_SHARED,
            fd, blink_base);
blink_mem = (unsigned char *) (bridge_map + BLINK_OFFSET);
*blink_mem = value;</pre>


<p>Здесь мы отображаем функцией mmap страницу памяти моста lwhps2fpga в пространство памяти процесса.</p>


<pre lang="bash" line="1"># enable the lwhps2fpga bridge
echo 1 > /sys/class/fpga-bridge/lwhps2fpga/enable
# make it blink fast
./blinker 1
# make it blink slow
./blinker 15</pre>


<p>Продолжение следует.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SoCKit Lab Instructions]]></title>
    <link href="http://arktur04.github.io/blog/2015/07/28/sockit-lab-instructions/"/>
    <updated>2015-07-28T18:46:23+05:00</updated>
    <id>http://arktur04.github.io/blog/2015/07/28/sockit-lab-instructions</id>
    <content type="html"><![CDATA[<p>Прочитал и освоил на практике воркбенч SoCKit Lab, две части, Hardware и Software.<br />
Данная программа лабораторных работ основана на системе на кристалле (SoC) Altera Cyclone V. SoC состоит из двух процессорных ядер ARM Cortex A9 и FPGA, которые соединены мостами и могут взаимодействовать друг с другом. Первое руководство, Hardware, выполняется в Quartus II, и описывает конфигурирование и подключение периферии к процессору, а также симуляцию системы в ModelSim.<br />
Вторая часть, Software, описывает процесс загрузки Linux, компиляцию простейшей программы (мигание светодиодом), отладку программы в ARM DS-5 Embedded Development Suite, и основы работы с SignalTap II Logic Analyzer в режиме совместной отладки программного кода и FPGA-проекта.</p>


<p><a href="http://32bit.me/wordpress/wp-content/uploads/2015/07/pic1.jpg"><img class="alignnone size-full wp-image-2101" alt="pic1" src="/assets/pic1.jpg" width="1000" height="328" /></a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Книга Louise Crockett и др. "the Zynq Book"]]></title>
    <link href="http://arktur04.github.io/blog/2015/03/03/%25d0%25ba%25d0%25bd%25d0%25b8%25d0%25b3%25d0%25b0-louise-crockett-%25d0%25b8-%25d0%25b4%25d1%2580-the-zynq-book/"/>
    <updated>2015-03-03T14:27:23+05:00</updated>
    <id>http://arktur04.github.io/blog/2015/03/03/%d0%ba%d0%bd%d0%b8%d0%b3%d0%b0-louise-crockett-%d0%b8-%d0%b4%d1%80-the-zynq-book</id>
    <content type="html"><![CDATA[<p>Дочитал книгу "The Zynq Book", руководство по системе на кристалле (SoC) Zynq-7000 фирмы Xilinx.</p>


<p>Напомню, что Zynq-7000 состоит из двух ядер ARM Cortex A9 и блока программируемой логики PL (по сути, встроенная в систему FPGA).</p>


<p>В книге подробно рассматривается структура системы, программный пакет Vivado, предназначенный для разработки под Zynq-7000, подробно рассматривается процесс преобразования кода на языке высокого уровня (например, С) в форму RTL, предназначенную для конфигурирования PL . Эта возможность обеспечивается программой Vivado HLS.<br />
В последней части книги кратко описывается структура и процедура загрузки Linux в память.</p>


<p><a href="http://32bit.me/wordpress/wp-content/uploads/2015/03/ZynqPerspective.png"><img class="alignnone size-medium wp-image-1954" alt="ZynqPerspective" src="/assets/ZynqPerspective-205x300.png" width="205" height="300" /></a><br />
Интересная книга, интересный процессор.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Time Capsule своими руками]]></title>
    <link href="http://arktur04.github.io/blog/2013/09/14/time-capsule-%25d1%2581%25d0%25b2%25d0%25be%25d0%25b8%25d0%25bc%25d0%25b8-%25d1%2580%25d1%2583%25d0%25ba%25d0%25b0%25d0%25bc%25d0%25b8/"/>
    <updated>2013-09-14T13:35:45+06:00</updated>
    <id>http://arktur04.github.io/blog/2013/09/14/time-capsule-%d1%81%d0%b2%d0%be%d0%b8%d0%bc%d0%b8-%d1%80%d1%83%d0%ba%d0%b0%d0%bc%d0%b8</id>
    <content type="html"><![CDATA[<p>Для бэкапа содержимого жесткого диска в OS X, как известно, используется приложение Time Machine, очень удобное и качественное. Однако для его работы нужно устройство Time Capsule. В этом посте я хочу рассказать о том, как я сделал свою Time Capsule на основе Raspberry Pi.</p>


<p>Итак, нам понадобятся следующие компоненты:</p>


<p>1. Raspberry Pi и SD-карта для него;</p>


<p>2. HDD (я использовал HDD на 1 Tb, но можно взять жесткий диск и другого объёма);</p>


<p>3. переходник USB-SATA (от коробки для внешнего диска);</p>


<p>4. источник питания с напряжениями +5В и +12В, который может обеспечить силу тока по каналу +5В не менее 1,7А, по каналу 12В не менее 0,6А;</p>


<p>5. Wi-Fi адаптер для USB;</p>


<p>6. вентилятор (я использовал вентилятор 40 мм);</p>


<p>7. корпус;</p>


<p>Собираем всё вместе:</p>


<p><a href="http://32bit.me/wordpress/wp-content/uploads/2013/09/pic1.jpg"><img class="alignnone size-medium wp-image-1769" title="pic1" src="/assets/pic1-300x225.jpg" alt="" width="300" height="225" /></a></p>


<p>(все картинки кликабельны)</p>


<p><!--more-->Перед установкой жесткого диска его необходимо отформатировать с файловой системой HFS+. Я воспользовался для этого утилитой MacDrive.</p>


<p>Итак, устанавливаем на SD-карту Linux Debian Wheezy и настраиваем всё согласно инструкции отсюда: <a href="http://www.raspberrypi.org/phpBB3/viewtopic.php?=63&amp;t=31511">http://www.raspberrypi.org/phpBB3/viewtopic.php?=63&amp;t=31511</a>.</p>


<p>Итак, всё готово, теперь Time Machine видит устройство и предлагает сделать резервную копию.</p>


<p><a href="http://32bit.me/wordpress/wp-content/uploads/2013/09/pic2.jpg"><img class="alignnone size-medium wp-image-1770" title="pic2" src="/assets/pic2-300x186.jpg" alt="" width="300" height="186" /></a></p>


<p>Теперь остался последний штрих. Устройство потребляет (и, соответственно, рассеивает) довольно существенную мощность для такого маленького корпуса, поэтому нужно проверить температуру, до которой нагреваются наиболее горячие части устройства. Я проверял температуру радиатора блока питания (он нагревается сильнее всего, на втором месте винчестер).</p>


<p><a href="http://32bit.me/wordpress/wp-content/uploads/2013/09/pic3.jpg"><img class="alignnone size-medium wp-image-1771" title="pic3" src="/assets/pic3-300x225.jpg" alt="" width="300" height="225" /></a></p>


<p>Максимальная температура, до которой нагревался радиатор при работе составила: с выключенным вентилятором &gt;60 °C, с включенным вентилятором ~40-42 °C. Проблема в том, что вентилятор издает довольно громкий звук. В принципе, 60 градусов можно считать приемлемой температурой, так что вентилятор можно отключить, но наиболее подходящим решением мне представляется следующее: подключить датчик температуры к RPi, подключить к нему же управление вентилятором (простой транзисторный ключ), и написать скрипт, который будет включать вентилятор по достижению порогового значения температуры (например, 50 °С), и выключать его при снижении температуры ниже другого порога (например, 45°С). Но это уже другая история.</p>

]]></content>
  </entry>
  
</feed>
