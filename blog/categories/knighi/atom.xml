<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: книги, | Записная книжка разработчика]]></title>
  <link href="http://arktur04.github.io/blog/categories/knighi/atom.xml" rel="self"/>
  <link href="http://arktur04.github.io/"/>
  <updated>2016-04-10T20:08:26+05:00</updated>
  <id>http://arktur04.github.io/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Книга А. Ахо, М. С. Лам, Р. Сети, Д. Ульман "Компиляторы: принципы, технологии и инструментарий"]]></title>
    <link href="http://arktur04.github.io/blog/2016/02/28/knigha-a-akho/"/>
    <updated>2016-02-28T21:38:00+05:00</updated>
    <id>http://arktur04.github.io/blog/2016/02/28/knigha-a-akho</id>
    <content type="html"><![CDATA[<p>Легендарная “Книга дракона”, 2-е издание, русск. язык, 1184 стр.</p>

<p><a href="/images/2016/02/50379_original.png"><img title="Книга дракона" src="/images/2016/02/50379_small.png" alt="" height="300" /></a></p>

<p>В книге излагается теория построения компиляторов, начиная от разбора исходников (токенайзер, лексер, парсер), до оптимизации машинного кода.
Однако, в книге, несмотря на большой объём, я не нашёл некоторых важных вещей, например, нет ни слова про SSA-форму. А именно представление программы в SSA-форме может сделать очень эффективными многие алгоритмы оптимизации и генерации машинного кода.</p>

<p>А в целом полезная книга, конечно, классика IT-литературы, всё-таки.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Книга Gabriel S. Hjort Blindell "Survey on Instruction Selection"]]></title>
    <link href="http://arktur04.github.io/blog/2016/02/14/knigha-gabriel-s-hjort-blindell-survey-on-instruction-selection/"/>
    <updated>2016-02-14T22:06:06+05:00</updated>
    <id>http://arktur04.github.io/blog/2016/02/14/knigha-gabriel-s-hjort-blindell-survey-on-instruction-selection</id>
    <content type="html"><![CDATA[<p>Прочитал книгу Gabriel S. Hjort Blindell “Survey on Instruction Selection”, 139 стр, англ. язык.
Книга про то, как осуществляется одна из самых важных стадий работы компилятора, выбор инструкций. Рассмотрены различные подходы и алгоритмы решения этой задачи, от первых компиляторов 1950-х годов до современных.</p>

<p><a href="/images/2016/02/49450_600.png"><img title="Creating an LLVM Backend for the Cpu0 Architecture" src="/images/2016/02/49450_600-small.png" alt="" height="300" /></a></p>

<p>Немного написано и про алгоритм, используемый в LLVM. К сожалению, ничего особенно нового эта информация мне не дала. Этот участок компилятора весьма сложен, и возможности для ручного вмешательства в его работу очень ограничены (хотя и существуют).</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Книга Steven W. Smith "the Scientist and Engineer’s Guide to Digital Signal Processing"]]></title>
    <link href="http://arktur04.github.io/blog/2016/01/10/knigha-steven-w-smith-the-scientist-and-engineers-guide-to-digital-signal-processing/"/>
    <updated>2016-01-10T20:51:57+05:00</updated>
    <id>http://arktur04.github.io/blog/2016/01/10/knigha-steven-w-smith-the-scientist-and-engineers-guide-to-digital-signal-processing</id>
    <content type="html"><![CDATA[<p>Steven W. Smith “The Scientist and Engineer’s Guide to Digital Signal Processing”, 626 стр, англ. язык. Книга легально и бесплатно доступна для скачивания с сайта Analog Devices.
Я читал эту книгу когда-то давно, но отдельными главами, а сейчас решил освежить в памяти ключевые моменты DSP.</p>

<p><a href="/images/2016/01/47958_600.gif"><img title="The Scientist and Engineer’s Guide to Digital Signal Processing" src="/images/2016/01/47958_600_small.png" alt="" height="300" /></a></p>

<p>Книга достаточно простая, и обходится абсолютным минимумом математических формул. Автор делает основной упор на то, чтобы читатель наглядно представлял себе, как связаны между собой различные преобразования, используемые в DSP: фильтрация, ДПФ, свёртка и т. п.
В книге приведены основные алгоритмы DSP: фильтры, КИХ и БИХ, ДПФ прямое и обратное и некоторые другие. Таким образом, вы можете воспользоваться готовыми программами, переписать их на С или на ассемблере и не вдаваться глубоко в математику.
Если интересна именно математика, лежащая в основе DSP, нужно читать Оппенгейма-Шафера.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Книга Chen Chung-Shu "Creating an LLVM Backend for the Cpu0 Architecture"]]></title>
    <link href="http://arktur04.github.io/blog/2016/01/04/knigha-chen-chung-shu-creating-an-llvm-backend-for-the-cpu0-architecture/"/>
    <updated>2016-01-04T20:17:43+05:00</updated>
    <id>http://arktur04.github.io/blog/2016/01/04/knigha-chen-chung-shu-creating-an-llvm-backend-for-the-cpu0-architecture</id>
    <content type="html"><![CDATA[<p>Прочитал книгу Chen Chung-Shu “Creating an LLVM Backend for the Cpu0 Architecture”, 575 стр., англ. язык.
Книга по LLVM, единственная в своём роде книга, детально описывающая процесс разработки бэкенда.</p>

<p><a href="/images/2016/01/line-tile.png"><img title="Creating an LLVM Backend for the Cpu0 Architecture" src="/images/2016/01/line-tile_small.png" alt="" height="300" /></a></p>

<p>Я читал эту книгу ранее, но автор непрерывно вносит исправления и дополнения в текст (эта книга существует только в онлайновом виде), поэтому я решил перечитать всё полностью, с начала до конца, самый свежий вариант. Сейчас я могу сказать, что читал по LLVM всё, что опубликовано, и что имеет хотя бы немного существенное значение (можно также найти огромное количество статей в духе “мы разработали компилятор для нашего процессора, это круто”. Их я обычно не читаю). Источников по LLVM очень мало, печатных книг всего две, например.</p>

<p>Проблема ещё и в том, что все процессоры разные, и нельзя просто скопировать исходник одного бэкенда, подправить там пару строк и получить другой. Они настолько различны, что вряд ли вы вообще найдёте в двух разных бэкендах похожие куски кода. Поэтому чтение этой книги не заменит вам собственного опыта.
Желающим разработать свой компилятор, я могу посоветовать следующее:
не бояться разбираться в существующем коде, как бэкендов, так и Core Library.
не бояться экспериментировать и писать с нуля собственные алгоритмы оптимизаций.
не пытаться изобрести велосипед. Если нужные функции есть в Core Library, их необходимо изучить и использовать. Если, напротив, каких-то функций нет ни в Core Library, ни в других бэкендах, значит, скорее всего, вы хотите странного, и, скорее всего, на самом деле это вам не нужно. Хотя могут быть исключения из этого правила.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Книга Вирт Н. "Построение компиляторов"]]></title>
    <link href="http://arktur04.github.io/blog/2015/12/16/knigha-virt-kompiliatory/"/>
    <updated>2015-12-16T20:00:22+05:00</updated>
    <id>http://arktur04.github.io/blog/2015/12/16/knigha-virt-kompiliatory</id>
    <content type="html"><![CDATA[<p>Прочитал книгу Вирт Н. “Построение компиляторов”, 192 стр., русск. язык.</p>

<p><a href="/images/2015/12/vurt_full.jpg"><img title="Qt5.3. Профессиональное программирование на С++" src="/images/2015/12/vurt_small.jpg" alt="" height="300" /></a></p>

<p>Книга может служить хорошим введением в тему, хотя классическим трудом по компиляторам является <a href="https://ru.wikipedia.org/wiki/%D0%9A%D0%BE%D0%BC%D0%BF%D0%B8%D0%BB%D1%8F%D1%82%D0%BE%D1%80%D1%8B:_%D0%BF%D1%80%D0%B8%D0%BD%D1%86%D0%B8%D0%BF%D1%8B,_%D1%82%D0%B5%D1%85%D0%BD%D0%BE%D0%BB%D0%BE%D0%B3%D0%B8%D0%B8_%D0%B8_%D0%B8%D0%BD%D1%81%D1%82%D1%80%D1%83%D0%BC%D0%B5%D0%BD%D1%82%D1%8B">“книга дракона”</a>.
Вирт в настоящее время несколько утратил былую славу, во многом из-за странного языка Оберон, который очень сильно уступает современным языкам. Все примеры в книге на Обероне. К счастью, он практически неотличим от Паскаля, с которого я когда-то начинал. Как краткое введение книгу читать можно.</p>
]]></content>
  </entry>
  
</feed>
